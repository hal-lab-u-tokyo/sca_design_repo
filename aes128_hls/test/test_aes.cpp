/*
*    Copyright (C) 2024 The University of Tokyo
*    
*    File:          /examples/aes128_hls/test/test_aes.cpp
*    Project:       sakura-x-shell
*    Author:        Takuya Kojima in The University of Tokyo (tkojima@hal.ipc.i.u-tokyo.ac.jp)
*    Created Date:  14-07-2024 04:11:57
*    Last Modified: 14-07-2024 04:11:59
*/


#include <stdio.h>

#define SIZE 16
#define TEST_NUM 16

void AES128Encrypt(const unsigned char* key, const unsigned char *plaintext, unsigned char* ciphertext);

// Test vectors
unsigned char key[TEST_NUM][SIZE] = {
	{0x24,0x1D,0x69,0xBE,0x58,0x63,0x13,0xCD,0xA6,0x8A,0x62,0x0C,0x1E,0x6D,0xF4,0xEB},
	{0xDF,0x82,0xC5,0xE7,0x7F,0x5C,0x04,0x49,0xC1,0x81,0x12,0x70,0xC7,0xAB,0xA3,0x85},
	{0xCB,0xD7,0xA0,0xEA,0x4C,0xE5,0xF4,0xFF,0xDE,0x1F,0x95,0xB3,0x83,0xA1,0x03,0x28},
	{0x63,0x29,0xA2,0xD9,0xC3,0x5B,0x1A,0x01,0x74,0x72,0xE9,0x4E,0x12,0x5C,0xE2,0xCA},
	{0xAE,0x56,0x9E,0xE3,0x13,0x2B,0xED,0x4E,0xFB,0x1A,0x7D,0x68,0xEC,0x9B,0xA5,0x88},
	{0xCD,0xE7,0x5C,0x04,0xB5,0x6B,0x94,0xDA,0x92,0x03,0x1F,0x45,0x05,0xE5,0x3C,0x52},
	{0x9E,0x52,0x35,0x9E,0xAC,0xC1,0xF9,0xA5,0xB9,0x85,0x71,0x79,0xB7,0x09,0xBC,0x4D},
	{0x55,0x69,0x80,0x0A,0xC6,0x99,0xC1,0x90,0xB2,0x07,0x8A,0x06,0x64,0x81,0xE0,0xD2},
	{0xA7,0x83,0x20,0x0B,0x52,0x6E,0xA6,0x13,0xEC,0x84,0x7D,0xE2,0x5E,0xAD,0x03,0x37},
	{0xD7,0x49,0xBF,0xE9,0x83,0x54,0x78,0x78,0x5D,0x39,0xFA,0x9B,0x8E,0xDD,0x6A,0x97},
	{0x0F,0xD8,0x04,0xB6,0x8E,0x14,0xAF,0x5C,0xDB,0x40,0xCE,0x7B,0x5E,0x10,0x96,0xFE},
	{0x7F,0x16,0x44,0x3F,0x66,0xC8,0x62,0x95,0xDC,0xF4,0xCC,0xAC,0x15,0x56,0x0B,0x17},
	{0x04,0xA6,0xDC,0x01,0x0D,0x7D,0xAC,0x01,0x9B,0x6D,0xCA,0x89,0x8E,0xC1,0x28,0x98},
	{0x5A,0x4F,0x05,0x9B,0x48,0x20,0xDB,0x86,0xF3,0x9E,0x56,0xCC,0x93,0x4B,0x76,0x24},
	{0x30,0x3F,0x48,0xB6,0xE8,0x83,0xE9,0x2C,0xBC,0xFF,0x97,0xCE,0x79,0x2C,0xAA,0x80},
	{0x61,0xAB,0x86,0x7B,0x33,0xC1,0xD3,0x8C,0xEF,0x99,0xD1,0x49,0x18,0x26,0xD8,0x3A}
};

unsigned char plaintext[TEST_NUM][SIZE] = {
	{0x5F,0xE1,0xE5,0x8A,0x75,0xE3,0x40,0x82,0xD2,0x8B,0xEF,0x49,0x24,0xCE,0x3A,0x6D},
	{0x33,0xD2,0x71,0x6A,0x20,0xBA,0x92,0x63,0xB0,0x66,0x27,0x06,0x67,0x82,0x62,0xE8},
	{0x16,0xD8,0x88,0x29,0x99,0x4F,0x84,0x94,0x79,0x9E,0xF6,0x26,0xEC,0x86,0x86,0x31},
	{0x8E,0x21,0xF0,0x41,0xB3,0x09,0xF1,0x8E,0x73,0x86,0xEE,0xDF,0x17,0xC2,0x25,0x57},
	{0x56,0x9D,0xB3,0xC4,0xFC,0x86,0xAF,0x5B,0xA4,0xCF,0xC2,0x90,0x85,0x6D,0xCC,0x0A},
	{0x7A,0x59,0x1F,0x28,0xE9,0x56,0x08,0x67,0x84,0x02,0x65,0x94,0xB5,0xB6,0x01,0x45},
	{0xFA,0xD7,0xAE,0x4E,0x34,0x43,0x2A,0x81,0xCD,0x51,0x20,0xF1,0x23,0x17,0x7D,0x1F},
	{0xF5,0x6D,0xE4,0xA9,0xBB,0xD3,0xF9,0xBD,0x34,0x2F,0x0E,0x98,0x9D,0xCD,0x88,0xA3},
	{0xF0,0xD0,0x6F,0xE3,0x3C,0xF5,0x80,0xB0,0x11,0x14,0x55,0x8F,0x7C,0x2A,0xC6,0x0D},
	{0x0B,0x74,0xC9,0x32,0x3B,0x9F,0x1E,0x08,0xF5,0x95,0x97,0x3C,0xE3,0x07,0xDF,0xDF},
	{0xF7,0xDE,0x3E,0x5C,0x95,0x21,0x41,0xAB,0x43,0xC0,0x0E,0xB8,0x35,0x7E,0x50,0x01},
	{0x08,0xF7,0xDC,0x90,0x4E,0xCD,0x42,0x13,0x1E,0x8F,0x6F,0xDE,0x33,0x82,0xF0,0xA0},
	{0x11,0x8B,0x35,0x0E,0x1B,0x5C,0x92,0x17,0x65,0x4F,0xBD,0xE2,0x4D,0xD8,0x02,0xCB},
	{0x03,0x62,0x56,0xFB,0xD4,0x00,0x95,0x51,0x49,0xFF,0x87,0x25,0x6B,0x00,0x8F,0xCE},
	{0xB5,0xF0,0x82,0xA9,0x1E,0x99,0x2F,0xB7,0x03,0x7E,0x55,0x3F,0x6B,0xEA,0xE9,0x5A},
	{0xE7,0x1F,0xFD,0x63,0xFE,0x6C,0xD0,0x7E,0x55,0x99,0x31,0xB1,0x2C,0x74,0xAB,0x88}
};

unsigned char expected[TEST_NUM][SIZE] = {
	{0x98,0x72,0xE8,0xE4,0xFF,0x3B,0xC1,0xE5,0x53,0x6E,0x24,0x90,0xD8,0xE6,0x38,0x65},
	{0x20,0x4A,0x8C,0xBB,0xD7,0x6B,0xF7,0x3D,0x98,0xF0,0x25,0x06,0x9B,0x48,0xCB,0x93},
	{0xEF,0x53,0xDE,0x06,0x99,0x82,0x48,0xAB,0x07,0x93,0xDC,0xC7,0x10,0x44,0x62,0x38},
	{0xAA,0xDB,0x65,0x68,0x5D,0xB5,0xFD,0x13,0xFA,0x0B,0x2A,0x8C,0x1B,0x27,0x6F,0x54},
	{0x5B,0x5E,0x7F,0x67,0xEE,0x2B,0xE1,0xA5,0x83,0x68,0x26,0xB3,0x92,0x40,0xC4,0x23},
	{0x2E,0xEE,0x76,0xB3,0xCE,0xE7,0x32,0x69,0x28,0x57,0xCA,0x8C,0xAD,0xBD,0xC8,0x49},
	{0x83,0x2B,0x4D,0x22,0x4E,0x26,0x9E,0x13,0x6B,0x2A,0x90,0x64,0x98,0x37,0x27,0xF6},
	{0xA6,0x9D,0x95,0xE7,0xDE,0x52,0xA5,0x50,0xD2,0x3F,0xC7,0x1E,0x93,0xAB,0xF3,0x7F},
	{0x3A,0xB0,0x04,0x5A,0x09,0x09,0x92,0x45,0x1D,0xAB,0x86,0x02,0xFB,0x49,0xC0,0x67},
	{0x0E,0x80,0x49,0x96,0xF6,0xA6,0x9A,0x51,0xAB,0x82,0x41,0xF0,0xF8,0x71,0xAB,0x6F},
	{0x08,0xFE,0xBA,0x6B,0x78,0x36,0x65,0x40,0x34,0x45,0x7F,0x69,0x90,0x28,0x00,0x06},
	{0x90,0x5E,0x0C,0xFB,0x84,0x74,0x67,0xAE,0x14,0x2B,0x56,0xBB,0x65,0x87,0x09,0x58},
	{0x27,0x0C,0xEC,0x42,0xC9,0x65,0x9C,0x16,0x09,0x86,0xA2,0xF5,0x2F,0xCA,0x43,0xDB},
	{0x05,0xC4,0x4F,0x7D,0xF7,0xEF,0xD6,0xE0,0x6E,0x2B,0xBC,0x55,0x45,0x73,0x68,0xEA},
	{0x61,0xAD,0x8C,0x5D,0x87,0x78,0xEA,0xA6,0x53,0x5D,0x83,0x3E,0xA4,0x0A,0xED,0x46},
	{0xD5,0xF9,0x70,0x0D,0x38,0xA7,0x14,0xF5,0x97,0x2B,0x83,0xD6,0x86,0x2A,0x3C,0x84}
};

void print_128bit(unsigned char* buf) {
	for (unsigned char i = 0; i < SIZE; i++) {
		printf("%02X", buf[i]);
		if (i % 4 == 3) {
			printf(" ");
		}
	}
	printf("\n");
}

int main()
{

	unsigned char ciphertext[SIZE];

	for (int i = 0; i < TEST_NUM; i++) {
		printf("Running test %d\n", i);
		AES128Encrypt(key[i], plaintext[i], ciphertext);
		printf("Key: ");
		print_128bit(key[i]);
		printf("Plaintext: ");
		print_128bit(plaintext[i]);
		printf("Ciphertext: ");
		print_128bit(ciphertext);
		for (int b = 0; b < SIZE; b++) {
			if (ciphertext[b] != expected[i][b]) {
				printf("%d-th byte is expected to be %d, but got %d\n", b, expected[i][b], ciphertext[b]);
				return 1;
			}
		}
		printf("\n");
	}
	printf("All tests passed\n");
	return 0;
}
